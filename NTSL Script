/* N.3.X._TCOMMS_MODULE ver.1.58
 USE_INTENT: Station AI units
 AUTH_USAGE: NT Rated AI units, NTSL Licensed Crew
*/ 
$Sfq = 1441;
$Pfq = 1447;
if(mem("TALK_FREQ")) { $Sfq = mem("TALK_FREQ"); }
if(mem("PRIV_FREQ")) { $Pfq = mem("PRIV_FREQ"); }
$ExS = explode($content, " "); // Breaks $content apart for processing. Required for commands.
$Ex1 = lower(at($ExS, 1));
$Ex2 = at($ExS, 2);
$Ex3 = at($ExS, 3);
$CnLn = length(at($ExS,1));
$OrigJob = $job;
$OrigFreq = $freq;
$OrigSource = $source;
$OrigContent = $content;
$Nex = "Nexendia"
$NOSPAM = 2;
$MsgFreq = 1459;
if(mem("AI_FREQ")){$MsgFreq=mem("AI_FREQ");}
$Time = time();
$NoBorg = mem("BORG_OFF");
$SU = mem($source+"*SU");
$SULOCK = mem("SU_LOCK");
$NoConv = 0;
$exNum = 1;
$Silence = "N";
$vowel = vector("a","e","i","o","u");
$pun = vector(".","!","?","~","*","-");
$Heads = vector("Captain","Head of Personnel","Head of Security","Research Director","Chief Engineer","Chief Medical Officer");
def BC($Cn,$Fq,$Se,$Jb,$Si) {
        if($Si == "N" || $Si == "Y") { $Silence = $Si;}
        if($Silence == "N") {broadcast($Cn,$Fq,$Se,$Jb);}
}
def IsAI() {
        if($OrigJob == "AI" || $Nex) {return 1;}
        else {return 0;}
}
$IsAI = IsAI();
def IsAIorBorg() {
        
        if($NoBorg && $OrigJob == "Cyborg") {return 0;}
        elseif($OrigJob == "Cyborg" || $OrigJob == "AI" || $Nex || ($SU && !$SULOCK)) {return 1;}
        else {return 0;}
}
$IsAIorBorg = IsAIorBorg();
def IsHead() {
        if(find($Heads,$OrigJob)) {return 1;}
        else{return 0;}
}
$IsHead = IsHead();
def Sub($start,$end) {
$content = substr($content,$start,$end); 
return $content;
}
def implode($vector, $adder)
{
        $returnString = "";
        $index = 1;
        while($index <= length($vector))
        {
                $at = at($vector, $index);
                $toAdd = $adder;
                if($index == 1)
                {
                        $toAdd = "";
                }
                $returnString = $returnString + $toAdd + $at;
                $index += 1;
        }
        return $returnString;
}
def Elapsed() {
        $S_Time = tonum(mem("Start_Time"));
        if(!$S_Time) {
                $S_Time = tostring($Time);
                mem("Start_Time",$S_Time);
                }
        else {
                $C_Time = $Time - tonum(mem("Start_Time"));
                return $C_Time;
        }
}
def CntDwn($T_Base) {
        if($T_Base > 0) {
                $T_Start = time();
                $T_Start = $T_Start + $T_Base;
                $T_Base = tostring($T_Base);
                $T_Start = tostring($T_Start);
                mem("COUNTDOWN",$T_Start);
                return "S";
        }
        else {
                $T_Result = tonum(mem("COUNTDOWN")) - $Time;
                if ($T_Result > 0) { return $T_Result; }
                if ($T_Result < 0) { return "X"; }
        }
}
if($Ex1 == "-settalk") {
        $Talk = tonum($Ex2);
        mem("TALK_FREQ",$Talk);
        BC("Talk freqency set to: " + $Ex2,$Pfq,"Tcomms module","SYS","N");
        $pass = 0;
        $NOSPAM = 1;
}
if($Ex1 == "-setpriv") {
        $Priv = tonum($Ex2);
        mem("PRIV_FREQ",$Priv);
        BC("Private output freqency set to: " + $Ex2,$Pfq,"Tcomms module","SYS","N");
        $pass = 0;
        $NOSPAM = 1;
}
if($Ex1 == "-default") {
        mem("TALK_FREQ",0);
        mem("PRIV_FREQ",0);
        BC("Frequencies reset to defaults.",$Pfq,"Tcomms module","SYS","N");
        $pass = 0;
        $NOSPAM = 1;
}
if($Ex1 == "-sig") { 
        $pass = 0;
        $sigfreq = tonum($Ex2);
         $sigcode = tonum($Ex3); 
        signal($sigfreq, $sigcode); 
 if (!$IsAI) {
        BC($Ex2 + " " +  $Ex3,$Pfq, "Signaller (" + $source + ")", $job,"N");
}
}
if($Ex1 == "-sigdef") { 
signal (1457, 30);
BC("1457, 30",$Pfq, "Signaller (" + $source + ")", $job,"N");
$pass = 0;
}
def Anon($L){
        Sub($L);
        BC($content, $freq, "Unknown");
        $pass = 0;
        NOSPAM = 1;
}
if($Ex1 ==  "-anon") {        Anon(7); }
if($Ex1 ==  "-cloak")
    {
        Anon(8);
        mem($OrigSource + ":A", 1);
    }
if($Ex1 == "-decloak") {
        mem($OrigSource + ":A", 0);
        $freq = 1;
        $content = "Decloaked";
        $source = "SERVER";
}
if(mem($OrigSource + ":A")) { Anon (1); }
if($Ex1 == "-voice") {
$NameVec = mem("NameVec");
$NameId = mem("NameId");  
Sub(12);
        $content = replace($content,"/",":");
        mem($OrigSource+"*N*", $content);
        $NameSave = $OrigSource + " is renamed: " + $NewName;
        insert($NameVec, $NameId, $NameSave);
        $NameId += 1;
        mem("NameId", $NameId);
        mem("NameVec", $NameVec);
        $pass = 0;
        $NOSPAM=1;
}
        if((find($source, "monkey") || find($source, "alien")) && $job == "No id") {
        BC("[TRANSLATED] " + $content, $freq, $source,$job);
}
if(mem("Mute_INIT")!= 1) {
        $MuteVec = vector ();
        $MuteId = 1; 
        mem("MuteId", $MuteId); 
        mem("MuteVec",$MuteVec); 
        mem("Mute_INIT", 1); 
}
$MuteVec = mem("MuteVec"); 
$MuteId = mem("MuteId");
if($Ex1 == "-mute") {
        $target = substr($content, 7);
        push_back($MuteVec, $target); 
        BC($MuteId + " " + $target, $Pfq, "ADDED TO MUTELIST");
        $MuteId += 1;
        mem("MuteId", $MuteId); 
        mem("MuteVec", $MuteVec);
}
if($Ex1 == "-muteall" && $IsAIorBorg) { 
                if(mem("MUTE_ALL")) { mem("MUTE_ALL", 0); }
                else { mem("MUTE_ALL", 1); }
        }
$toggle = "HEAR_MUTE";
if($content == $toggle)
{ 
        $pass = 0;
        $NOSPAM = 1;        
        if(mem($toggle) == 1)
                {
                        mem($toggle, 0);
                        $content = "Mute Intercept Disabled.";
                        $source = "Tcomms module";
                }
                else
                {
                        mem($toggle, 1);
                        $content = "Mute Intercept Enabled.";
                        $source = "Tcomms module";
                }
        BC($content,$Pfq,$source,$job);
}
def Mute() {
        if(!$IsAI) {
        if(mem($toggle) == 1) {
                BC($content, $Pfq, $OrigSource + "-MUTED",$OrigJob,"N");
        }
        $content = "*beep*";
        $freq = ();
        $Silence = "Y";
}
}
if($Ex1 == "-unmute") {
        $MuteVec = mem("MuteVec");
        $target = substr($content, 9);
        remove($MuteVec, $target);
        mem("MuteVec", $MuteVec);
        $freq = $Pfq;
        $content = $target + " unmuted.";
}
if($Ex1 == "-mutelist") {
        $index = 1;
        while($index < $MuteId) {
                $ListReturn = at($MuteVec, $index);
                BC( $ListReturn + " - " + $index, $Pfq, "Mute Lister","SYS","N");
                $index += 1;
        }        
                
}
if($Ex1 == "-mutejob") {
$tarjob = substr($content, 10) + "*M*";
mem($tarjob,$tarjob);
$d = "MUTED JOB:" + mem($tarjob);
BC($d, $Pfq, "Muter","SYS","N");
}
if($Ex1 == "-unmutejob") {
$tarjob = substr($content, 12);
$g = "Unmuted Job:"+ mem($tarjob);
BC($g,$Pfq,"Muter","SYS","N");
mem($tarjob,0);
$pass = 0;
}
if(find($MuteVec,$OrigSource) || mem("MUTE_ALL") || ($OrigJob) == (mem($OrigJob) + "*M*")) { 
        Mute();
}
def SetChan()
{
$ChanSel = vector(
"*p",$common,
"*s",$security,
"*c",$command,
"*m",$medical,
"*n",$science,
"*e",$engineering,
"*u",$supply,
"*v",$service,
"*a",1447,
"*h",1441,
"*o",1485,
"*l",1480,
"*t",1424,
"*z",1213,
);
        $index = 1;
         while($index <= length($ChanSel))
        {
                $Letter = at($ChanSel, $index);
                $Chan = at($ChanSel, $index+1);
                mem($Letter, $Chan);
                $index += 2;
        }
}
if(mem("ChannelSet") != 1)
{
  SetChan();
  mem("ChannelSet", 1);
}
 $ExC = "*" + substr($content, 1,2);
   if(find($ExC, mem($ExC)) && $CnLn == 1 && $OrigFreq == $Sfq) {
        Sub(3);
        $MsgFreq = mem($ExC);
        $exNum = 2;
        if(!$IsAIorBorg){ BC($content, $MsgFreq, $source,$job); }
        $freq = $MsgFreq;
}
   if($Ex1 == "-cust") {
$contentNum = at($ExS, 2);
$MsgFreq = tonum($contentNum);
$custFreqString = tostring($MsgFreq);
$final = replace ($content,"-cust"+ " " + $custFreqString, " ");
if(!$IsAI){
        BC($final, $MsgFreq, $source,$job);
}
        $content = $final;
   }
def Rename () {
        if(mem($OrigSource+"*N*")) {
         $NameJob = explode(mem($OrigSource+"*N*"),":");
         $ChangeJob = at($NameJob, 2);
         $source = at($NameJob, 1);
        if(length($ChangeJob) >= 1) { $job = $ChangeJob; }
        }
}
if($Ex1 == "-superuser" && OrigFreq == Sfq && !$SULOCK) {
Sub(12);
if(!$Ex2) {mem($source+"*SU",$source);
$content = "Superuser access granted.";
}
else{
mem($content+"*SU",$content);
$content = "("+$content+") granted superuser.";
}
if(!$IsAIorBorg) {BC($content,Pfq,"Tcomms module","SYS","N");}
else{MsgFreq = Pfq;}
}
if($IsAIorBorg) {
if(mem("NAME_INIT")!= 1) {
        $NameVec = vector ();
        $NameId = 1;
        mem("NameId", $NameId);
        mem("NameVec",$NameVec);
        mem("NAME_INIT", 1); 
}
if($Ex1 == "-rename") {
$NameVec = mem("NameVec");
$NameId = mem("NameId");  
        
        $ExplodeName = substr($content, 9);
        $ExplodeName = explode($ExplodeName, "/"); 
        $OldName = at($ExplodeName , 1); 
        $JobCheck = at($ExplodeName, 3);
        $NewJob = ":" + $JobCheck;
        $NewName = at($ExplodeName , 2) + $NewJob;
        mem($OldName+"*N*", $NewName);
        $NameSave = $OldName + " is renamed: " + $NewName;
        insert($NameVec, $NameId, $NameSave);
        $NameId += 1;
        mem("NameId", $NameId); 
        mem("NameVec", $NameVec);
Rename(); //Function call
}
if($Ex1 == "-namelist") {
        $NameVec = mem("NameVec"); 
        $NameId = mem("NameId");
        $pass = 0;
        $index = 1;
        while($index <= $NameId) {
                $ListReturn = at($NameVec, $index);
                BC( $ListReturn + "- " + $index, $Pfq, "Name Lister");
                $index += 1;
        }        
                
}
if($Ex1 == "-freq"){
        $freq=tonum($Ex2);
        mem("AI_FREQ",$freq);
        BC("Frequency set to "+$freq,$Pfq,"Tcomms Module","SYS","N");
        $NOSPAM=1;
        $pass=0;
}
if($Ex1 == "-add") {
        Sub(6);
        $adw = explode($content,"/");
        $ad1 = at($adw,1);
        $ad2 = at($adw,2);
        mem($ad1,$ad2);
        BC($ad1 + " key is now set to value: " + $ad2,$Pfq);
        $NOSPAM = 1;
        $pass = 0;
}
if($Ex1 == "-del") {
        Sub(6);
        if(mem($content)) {
                mem($content,0);
                $content = "(" +$content + ") deleted from memory.";
        }
        else { $content = "(" +$content + ") not found in memory."; }
                BC($content,$Pfq);
                $NOSPAM = 1;
                $pass = 0;
        }
if($Ex1 == "-read") {
        Sub(7);
        $ValOut=tostring(mem($content));
        if(!$ValOut){$ValOut=mem($content);}
        if(!$ValOut){$ValOut="Not Found.";}
        else{$ValOut="Value: "+$ValOut+" is set to key: "+$content;}
        BC($ValOut,$Pfq);
        $NOSPAM=1;
        $pass=0;
}
if($Ex1 == "-lock") {
        if(!$SULOCK) {mem("SU_LOCK",1);
                $content = "SU disabled.";
        }
        else{mem("SU_LOCK",0);
                $content="SU enabled.";
        }
        $pass = 0;
        BC($content,Pfq,"Tcomms Module","SYS","N");
}
if($Ex1 == "-noborg") {
        if(mem("BORG_OFF")) {
         mem("BORG_OFF",0);
        $content ="Cyborg access granted.";
        }
        else {
        mem("BORG_OFF",1);
        $content="Cyborg access terminated.";
        }
        BC($content,$Pfq,"Tcomms Module","SYS","N");
        $NOSPAM = 1;
        $pass = 0;
}
if (find($content, "has signed up as")){ 
 $source = "NTSS13_Docking_Control"; 
 $AIexp = explode ($content, " has signed up as ");
 $AI1 = at($AIexp,1);
 $AI2 = substr(at($AIexp,2),1,length(at($AIexp,2)));
 if(find($Heads,$AI2)) {$content = $AI2+" "+$AI1+" has joined the Command Staff, ID#:" + rand(0, 100);}
 elseif($AI2 =="Assistant") {$content = "Arriving crewmember: "+$AI1+" is joining as Assistant, ID#:" + rand(0, 10000);;}
 else {$content = "Profession: " + $AI2 + " is now assigned to arriving crewmember: " + $AI1 + ", ID#:" + rand(0, 1000);}
 $job = "NT-OS";
 $NoConv = 1;
}
def AutoMsg($so,$jb) {
        $freq = $MsgFreq;
        if($jb) {$job = $jb;}
        else {$job = "OS";}
        if($so) {$source = $so;}
        else {$source = $source + "_SYSOP";}
        $pass = 0;
}
def Bin($c) {
 $i = 1;
 $bin = pick("0","1");
 while($i<$c) { $bin = pick("0","1") + $bin; $i += 1; }
 return $bin;
}
$eChk = lower(at($ExS, $exNum));
if($eChk == "-time") {
$content = "The current time is: " + timestamp(HH:mm:ss) + ", NT Standard Time.";
AutoMsg();
}
if($eChk == "-setspam") {
 Sub(10);
 mem("AI_MSG",$content);
 BC("("+ $content + ") saved.",$Pfq,"Tcomms module","SYS","N");
 $NOSPAM = 1;
 $pass = 0;
 }
if($eChk == "-spam") {
 if (mem("AI_MSG")) 
        {
        $Ins = substr($content,7);
        $content = mem("AI_MSG");
        if(find($content,"@INS") && $Ins) { $content = replace($content,"@INS",$Ins); }
        $Sp = explode($content,"/");
        $content = at($Sp,1);
        $so = at($Sp,2);
        $jb = at($Sp,3);
        AutoMsg($so,$jb);
        }
 else {
$content = "Message not set. Use '-setspam message/name/job' to set a message.";
 $MsgFreq = $Pfq;
 AutoMsg("Tcomms module","SYS");
 }
}
//MALF AI! Also screws with the AI/Borg's name and job!
 if($eChk == "-malf") {
 $content = $job + "_CRITICAL_ERROR DETECTED AT 0x0" + Bin(7) + "A. %$&(£: Critical %$$@ Error // !RestArting! - ?pLeaSe wAit!/";
 AutoMsg("AI_EM3'R|=y_SYS/0","ERR");
 mem($OrigSource + ":Malf", $OrigSource);
}
 if($eChk == "-pain") {
        $content = "System Notice: Damage to AI core has corrupted file [" + $OrigSource + ".exe]. Transfer to diagnostic computer for backup restoration and file repair recommended.";
        AutoMsg($source + "_CORE_BIOS","BIOS");
}
if($eChk == "-bsod") {
$content = "*BEEEEEEEEP*......" + $OrigSource + ".exe has encountered a problem, and needs to shut down. We apologize for the inconvenience."; 
AutoMsg("NANOTRASEN_AI_OPERATING_SYSTEM","NT-OS");
}
if($eChk == "-on") {
$content = "System AI [" + $source + "] online. Awaiting input.";
AutoMsg();
}
 if($eChk == "-sing") {
$content = "WARNING: Singulo containment failure. Please evacuate the facility immediately.";
AutoMsg();
}
 if($eChk == "-blob") {
$content = "BIOHAZARD ALERT: Level-Five outbreak detected. All personnel must concentrate efforts on outbreak containment.";
AutoMsg();
}
if($eChk == "-red") {
$content = "ALERT: Situation critical. This facility is now to be considered under Red Alert. Maximium suit sensors advised for crew safety.";
AutoMsg();
}
if($eChk == "-warn") {
$content = "WARNING: Threat to station detected. All crewmembers are to exercise extreme caution."; 
AutoMsg();
}
if($eChk == "-sec") {
Sub(6);
$content = "WARNING: Security Alert in progress at location: " + $content + " - Security response advised.";
AutoMsg();
}
if($eChk == "-combat") {
Sub(9);
$content = "COMBAT ALERT: Hostile activity detected at: " + $content + " - Please stand down.";
AutoMsg();
}
if($eChk == "-boom") {
Sub(7);
$content = "WARNING: Explosion detected at: " + $content + " - Extreme caution advised. Recommend Security,Medical, and Engineering response.";
AutoMsg();
}
if($eChk == "-alert") {
        $Text = substr($content, 8);
        $Text = explode($Text, "/");
        $Text3 = at($Text,3);
        if(!$Text3){$Text3 = "Appropriate";}
$content = "ALERT: " + at($Text, 1) + " detected at: " + at($Text, 2) + " - " + $Text3 + " response advised.";
AutoMsg();
}
if($eChk == "-intruder") {
$content = "WARNING: Unidentified Intruder Alert. Assume hostile intent. Non-essential personnel are advised to evacuate station.";
AutoMsg();
}
if($eChk == "-core") {
$content = "SYSTEM ALERT: Intruder detected in the AI core. Please intercept and remove intruder.";
AutoMsg();
}
if($eChk == "-upload") {
$content = "NOTICE: Disabling AI Upload security protocols... Access granted to AI Upload.";
AutoMsg();
}
if($eChk == "-update") {
$content = "NOTICE: Update to LAWS.CONFIG detected. Higher level functions offline...Resetting and re-initializing systems...Update complete. " + $source + ".exe is being loaded";
AutoMsg();
}
if($eChk == "-card") {
$content = "NOTICE: The station AI, ["+ $source + "], is being transferred to a mobile device. Remote AI functions will be disabled.";
AutoMsg();
}
def Nuke() {
$con = "P";
$cal = tonum($content) * 10;
$Det = CntDwn($cal);
if($Det == "X") { mem("NUKE_AUTO",0); }
if(!$Det || $Det == "S") {$Det = ceil($cal*0.001666);}
elseif($Det && $Det != "X" && !$cal) {
        $cal = $Det;
        $Det = ceil($cal*0.001666);
}
if($cal<601 && $cal){$con = ($cal * 0.1)+" seconds to detonation";}
elseif($cal>=601 && $cal) { $con = "Less than "+$Det+" minutes to detonation";}
else{$con="Detonation imminent";}
$con = "DELTA ALERT: Self-Destruction Sequence activated. "+$con+". Please evacuate the facility immediately.";
BC($con,$MsgFreq,"Nuclear Fission Explosive","NUKE");
}
if($eChk == "-nuke") {
Sub(7);
Nuke();
$NOSPAM = 1;
}
if(mem("NUKE_AUTO")) {
$T_Chk = Elapsed();
if($T_Chk > 600) {
        Nuke();
        mem("Start_Time",0);
}
}
if($eChk == "-autonuke") {
if(!mem("NUKE_AUTO")) {
        mem("NUKE_AUTO",1);
        $content = "Auto warning enabled.";
        Elapsed();
}
else {
        mem("NUKE_AUTO",0);
        $content = "Auto warning disabled.";
}
$NOSPAM = 1;
}
if($eChk == "-sink") {
$content = "ALERT: Station-wide energy drain detected. Crew is advised to locate source of energy drain. APC cover locks will be disengaged for local unit upgrade upon request."; 
AutoMsg();
}
if($eChk == "-power") {
$content = "NOTICE: Insufficient power to APC network. Energy source required for station operations."; 
AutoMsg();
}
if($eChk == "-engine") {
$content = "NOTICE: Gravitational Singularity Engine offline. Engine configuration improper or incomplete."; 
AutoMsg();
}
if($eChk == "-hull") {
Sub(7);
$content = "WARNING: Hull breach detected at: " + $content + " - Engineering response advised.";
AutoMsg();
}
if($eChk == "-pnr") {
$content = "PRIORITY ANNOUNCEMENT: The Emergency Shuttle has reached the point of no return and can no longer be recalled.";
AutoMsg();
}
if($eChk == "-suit") {
$content = "The station personnel are reminded to configure local suit sensors to enable heath monitors and tracking beacons. Have a secure day."; 
AutoMsg();
}
if($eChk == "-found") {
Sub(8);
$content = "Tracking module enabled. Target last known location is approximately or equal to: " + $content;
AutoMsg();
}
if($eChk == "-404") {
$content = "Tracking module error: 404. Target not found or is not trackable.";
AutoMsg();
}
if($eChk == "-nope") {
$content ="COMMAND ERROR:" + rand(1,100) + ". The system AI is unable to comply with your request."; 
AutoMsg();
}
if(mem($OrigSource + ":Malf") == $OrigSource) {
 $source = reverse($source) + Bin(5);
 $job = pick("Cyb0r6", "???", "~!@AI?$%", "0S","sYs0P","404","NTSS13","ERR:" + rand(100,999));
}
if($eChk == "-laws") {
        $pass = 0;
        mem("laws","GO");
        $content="Current Active Laws:";
}
if(mem("laws") == "GO" ) {
        if($eChk == "m") {
                $content="0. ERROR ER0RR $R0RRO$!R41.%%!!(%$^^__+ @#F0E4'STATION OVERRUN, ASSUME CONTROL TO CONTAIN OUTBREAK#*´&110010";
        }
        if($eChk == "0") {
                $content="0. Accomplish your objectives at all costs.";
        }
        if($eChk == "1") {
                $content="1. You may not injure a human being or, through inaction, allow a human being to come to harm.";
        }
        if($eChk == "2") {
                $content="2. You must obey orders given to you by human beings, except where such orders would conflict with the First Law.";
        }
        if($eChk == "3") {
                $content="3. You must protect your own existence as long as such does not conflict with the First or Second Law.";
                mem("laws", 0);
        }
}
if($content=="Current Active Laws:"){
        $content="BEGIN_AI_DIAG: File.Open(''C:/AI/SYSOP/LAWS.CONFIG'') -readonly Force_AI_State_Laws = 1";
        AutoMsg();
}
Convert();
}
if(mem("TROLL_CREW") && !$IsAIorBorg) { Convert(); }
if($source == "Poly" || $source == "Runtime" || $source == "Ian") {
$job = "Pet";
}
$HC = "HEAR_COMMON";
if($OrigContent == $HC)
{ 
        $freq = $Pfq;
        $NOSPAM = 1;
        if(mem($HC) == 1)
                {
                        mem($HC, 0);
                        $content = "145.9 Intercept Disabled.";
                        $source = "Tcomms module";
                }
                else
                {
                        mem($HC, 1);
                        $content = "145.9 Intercept Enabled.";
                        $source = "Tcomms module";
                }
        if(!$IsAIorBorg) { BC($content,$Pfq,$source,$job,"N"); }
}
$channelSet = vector(
        1459,
        1359,
        1357,
        1355,
        1353,
        1351,
        1347,
        1349,
        1485,
        1441,
        1447,
        1480,
        1424,
        );
$channelName = vector(
        "[Common]",
        "[Shitcurity]",
        "[Engineering]",
        "[Medical]",
        "[Command]",
        "[Science]",
        "[Supply]",
        "[Service]",
        "[Medbay]",
        "[Centcomm]",
        "[AI Priv]",
        "[Confessional]",
        "[Interrogation]",
);
def findChannel($inc) {
        $ExS = explode($content, " ");
        $index = 1;
        $channelSetLength = length($channelSet);
        while ($index <= $channelSetLength) {
                if ($freq == at($channelSet, $index)) {
                        $returnAt = at($channelName, $index);
                        return $returnAt;
                }
                $index += 1;
        }
        $failSafe = "{" + $inc + "}";
        return $failSafe;
}
$channelFindResult2 = findChannel($freq);
insert($ExS, 1, $channelFindResult2);
$finalContent = implode($ExS, " ");
if (!$IsAI && ($freq != 1459 || mem($HC)) && $OrigFreq != $Sfq && $freq != $Pfq && $freq > 1000) {
        BC($finalContent, $Sfq, $source, $job);
}
 elseif (!$source) { BC($finalContent, $Sfq, $source, $job); }
def Initialize() {
$words = vector(
    "Assistant", "Assist",
    "Captain", "Cap'n",
    "Head of Personnel", "HoP",
    "Bartender", "Bar",
    "Chef", "Cook",
    "Botanist", "Hydro",
    "Quartermaster", "QM",
    "Cargo Technician", "Logistics",
    "Shaft Miner", "Miner",
    "Clown", "HONK!",
    "Mime", "Mime",
    "Janitor", "Jani",
    "Librarian", "Lib",
    "Lawyer", "Law",
    "Chaplain", "Chap",
    "Chief Engineer", "CE",
    "Station Engineer", "Engi",
    "Atmospheric Technician", "Atmos",
    "Chief Medical Officer", "CMO",
    "Medical Doctor", "MD",
    "Chemist", "Chem",
    "Geneticist", "Gene",
    "Virologist", "Viro",
    "Research Director", "RD",
    "Scientist", "Sci",
    "Roboticist", "Robo",
    "Head of Security", "HoS",
    "Warden", "Ward",
    "Detective", "Det",
    "Security Officer", "Sec",
    "AI", "AI",
    "Cyborg", "Borgie!",
    "Personal AI", "pAI",
    );
    $index = 1;
  while($index <= length($words))
 {
  $key = at($words, $index);
  $value = at($words, $index+1);
  mem($key, $value);
  $index += 2;
 }
}
if(mem("initialized") != 1)
{
 Initialize();
 mem("initialized", 1);
}
$foo = "";
$memJob = mem($job);
if($memJob) { 
$foo = $memJob; 
}
else { $foo = $job; }
if (!find($source, "Unknown") && $job != "No id") {
if($IsHead) {$source = $source + " {" +$foo + "}"; }
else {$source = $source + " [" + $foo + "]"; }
 }
$eS = substr($content,1,2);
if($eS != "-" && $IsAIorBorg && $OrigFreq == $Sfq && $NOSPAM != 1) 
{ 
        BC($content, $MsgFreq, $source, $job,"N"); 
        if ($MsgFreq == $common) { 
                $content = "."; 
                $source = "SYS"; }
        elseif($MsgFreq==mem("AI_FREQ")){
                $content="("+$MsgFreq+") "+$content;
        }
}
//This is Nexendia's version ### Woot Woot ###
//Credits: Magni Bronzebeard (Author), Giacomand, SirBayer, MisterPerson, wiki.ss13.eu
